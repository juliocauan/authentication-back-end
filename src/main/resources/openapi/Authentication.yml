openapi: '3.0.3'
info:
  title: Token Authentication API
  version: '0.1.1'
servers:
  - url: https://api.server.test/v1
tags:
  - name: 'auth'
  - name: 'test'

paths:
  /api/auth/signup:
    post:
      tags:
        - 'auth'
      summary: 'Signup new Account'
      description: 'Check existing and Save User to database'
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupForm'
      responses:
        '201':
          description: 'Registered successfully!'
          content:
            application/json:
              schema:
                type: string
                default: 'User registered successfully!'
        '400':
          description: 'Bad Request in form! Could not register new User!'

  /api/auth/signin:
    post:
      tags:
        - 'auth'
      summary: 'Login an Account'
      description: 'Authenticate {username, password} and Create JWT string with a secret'
      operationId: signinUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninForm'
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
        '401':
          description: 'Unauthorized!'

  /api/auth/profile:
    get:
      tags:
        - 'auth'
      security:
        - bearerAuth: []
      summary: 'User Profile Content'
      description: 'Access enabled only to User'
      operationId: profileContent
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '403':
          description: 'Forbidden!'  
  
  /api/auth/profile/{userId}:
    patch:
      tags:
        - 'auth'
      security:
        - bearerAuth: []
      summary: 'Alter User Role'
      description: 'Access enabled only to Admin'
      operationId: alterUserRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserId'
        - name: roles
          in: query
          required: true
          schema:
            type: array
            uniqueItems: true
            minItems: 1
            items:
              $ref: '#/components/schemas/EnumRole'
      responses:
        '200':
          description: 'Patched User Roles successfully!'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileRoles'
        '403':
          description: 'Forbidden!'
  
  /api/test/all:
    get:
      tags:
        - 'test'
      summary: 'Public Content'
      description: 'Access enabled to anyone'
      operationId: allAccess
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                type: string
  
  /api/test/admin:
    get:
      tags:
        - 'test'
      security:
        - bearerAuth: []
      summary: 'Admin Restrict Content'
      description: 'Access enabled only to Admin'
      operationId: adminAccess
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                type: string
        '403':
          description: 'Forbidden!'  
  
  /api/test/manager:
    get:
      tags:
        - 'test'
      security:
        - bearerAuth: []
      summary: 'Manager Restrict Content'
      description: 'Access enabled only to Manager'
      operationId: managerAccess
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                type: string
        '403':
          description: 'Forbidden!'  
  
  /api/test/user:
    get:
      tags:
        - 'test'
      security:
        - bearerAuth: []
      summary: 'User Restrict Content'
      description: 'Access enabled to User'
      operationId: userAccess
      responses:
        '200':
          description: 'Authenticated successfully!'
          content:
            application/json:
              schema:
                type: string
        '403':
          description: 'Forbidden!'

components:
  schemas:
    ApiError:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        fieldErrors:
          type: array
          items:
            type: string

    SignupForm:
      type: object
      required:
        - 'username'
        - 'password'
        - 'role'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        role:
          $ref: '#/components/schemas/EnumRole'
    SigninForm:
      type: object
      required:
        - 'username'
        - 'password'
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    Username:
      type: string
      format: email
      description: 'User e-mail for contact and to redefine lost password [UNIQUE]'
      example: 'example@example.com'
      maxLength: 50
    Password:
      type: string
      format: password
      description: 'User password to access account'
      example: '1234567890'
      minLength: 8
      maxLength: 120
    EnumRole:
      type: string
      enum:
        - 'ADMIN'
        - 'MANAGER'
        - 'USER'
      default: USER
      description: 'Client permissions'
    JWTResponse:
      type: object
      required:
        - 'token'
        - 'type'
        - 'username'
        - 'roles'
      properties:
        token:
          type: string
        type:
          type: string
          default: 'Bearer'
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EnumRole'
    Profile:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
    ProfileRoles:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        roles:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/EnumRole'
    UserId:
      type: string
      format: uuid

  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
